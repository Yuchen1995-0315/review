前情回顾

1. HTTP协议

   什么是http协议
   怎样获取一个网页的
   请求和响应

       请求格式： 请求行   GET  POST  HEAD  PUT DELETE
                请求头
                空行
                请求体

       响应格式：  响应行  200  404
                 响应头  Content-Type:text/html
                 空行
                 响应体  数据

2. 进程

    进程 ： 程序执行的过程

       * 进程状态及状态转换
       * 进程如何产生及一些概念

3. fork创建进程

4. getpid() getppid()  os._exit()  sys.exit()
=================================================

聊天室思路分析

1. 需求分析 ： 达到什么效果

2. 技术点分析

   * 数据流动方向
     转发： 客户端-->服务端-->其他客户端

   * 网络模型如何构建
     构建udp模型

   * 需要存什么信息，怎么存

     服务端存所有进入聊天室人员信息
     {name:address}
     [(name,address)]
     class Person:
        def __init__(self,name,address):
            self.name = name
            self.address = address

   * 保证消息收发随意
     收消息和发消息使用不同的进程

3. 结构设计和协议设定

   * 网络通信搭建
   * 进入聊天室
   * 聊天
   * 退出聊天室
   * 管理员消息

   封装结构 ： 函数封装

   协议 ：
      请求类型  L  进入聊天室
               C  聊天
               Q  退出

      回复情况  OK 表示成功
               EXIT 表示让客户端退出

4. 逐个功能分析，列出逻辑流程

   网络通信搭建
       封装udp服务端客户端

   进入聊天室
       客户端： 输入用户名
               将请求发送给服务器
               得到结果（失败重新输入）

       服务端： 接收请求
               判断用户可否登录
               将结果告知客户端
               如果客户端登录则告知其他人，添加存储结构

   聊天
       客户端  创建新的进程
              一个进程收消息
              一个进程发送消息

       服务端  接收请求
              将消息发送给其他人

   退出聊天室
       客户端： quit ctrl-c退出
               将请求发送给服务端
               结束进程

       服务端： 接收请求
               通知其他用户
               将该用户删除

作业： 1. 将聊天室代码梳理一下
      2. multiprocessing模块完成
         创建两个子进程,分别复制一个文件的上半部分和下半部分
         ，将他们各自复制到一个新文件里。
         os.path.getsize()

