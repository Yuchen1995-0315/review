"""
    day13 复习
    面向对象：考虑问题从对象的角度出发。 谁？ 干嘛？
    抽象：对象1、对象2、对象3 -- > 类
         子类1、子类2、子类3...  --> 父类
         从多个事物中，舍弃个性（非本质的）特征，
         抽出共性的本质的过程.
    三大特征：
        封装：
            语法：用类将多个数据，与对数据的操作整合为一个类型。
                 class 类名：
                    def __init__(self,参数):
                        self.数据1 = 参数
                        self.数据2 = 参数
                        ....

                    def 对数据的操作(self):
                        方法体

                 变量 = 类名(参数)
            设计：分而治之、变则疏之.
                 高内聚、低耦合.
        继承：
            语法：继承方法：子直接可以使用父类方法.
                 继承数据：
                      子类没有构造函数__init__则使用父类的
                      子类有构造函数则需要调用父类构造函数super().__init__
                      class 父类:
                          def __init__(self,爸爸参数):
                               self.爸爸的数据 = 爸爸参数

                      class 子类(父类):
                           def __init__(self,爸爸参数,儿子参数):
                               super().__init__(爸爸参数)
                               self.儿子的数据 = 儿子参数
            设计：
                抽象变化,隔离变化
        多态：
            语法：调用父类方法，在不同子类上执行效果不同。
                class 父类:
                    def 功能1(self):
                        ....

                class 子类(父类):
                      # 3. 子类重写
                     def 功能2(self):
                        ....

                变量 = 父类()
                变量.功能1()# 不是多态

                变量 = 子类()
                变量.功能1()# 不是多态

                def 函数(父类型参数):
                    # 1. 调用父类方法
                    父类型参数.功能1()
                # 2. 传递子类对象
                函数(子类())

            设计：增加程序的灵活度(子类替换父类执行不同逻辑)

    设计原则：
        1. 开闭原则：允许增加新功能，不允许修改客户端代码(调用方).
        2. 单一职责：一个类有且只有一个改变它的原因。
        3. 依赖倒置：调用父类，不调用子。 
"""








