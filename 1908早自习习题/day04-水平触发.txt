1. 什么是水平触发和边缘触发？
    在linux的IO多路复用中有水平触发,边缘触发两种模式,这两种模式的区别如下:
    水平触发:如果文件描述符已经就绪可以非阻塞的执行IO操作了,此时会触发通知.
允许在任意时刻重复检测IO的状态,没有必要每次描述符就绪后尽可能多的执行IO.
    select,poll就属于水平触发.
    边缘触发:如果文件描述符自上次状态改变后有新的IO活动到来,此时会触发通知.
在收到一个IO事件通知后要尽可能多的执行IO操作,因为如果在一次通知中没有执行
完IO那么就需要等到下一次新的IO活动到来才能获取到就绪的描述符.
信号驱动式IO就属于边缘触发.
    epoll既可以采用水平触发,也可以采用边缘触发.默认是水平触发。
2. epoll的水平触发和边缘触发
    水平触发：当被监控的文件描述符上有可读写事件发生时，
epoll_wait()会通知处理程序去读写。如果这次没有把数据一次性全部读写完(如
读写缓冲区太小)，那么下次调用 epoll_wait()时，它还会通知你在上没读写完的
文件描述符上继续读写，当然如果你一直不去读写，它会一直通知你！！！如果
系统中有大量你不需要读写的就绪文件描述符，而它们每次都会返回，
这样会大大降低处理程序检索自己关心的就绪文件描述符的效率！！！
    边缘触发：当被监控的文件描述符上有可读写事件发生时，epoll_wait()会通知
处理程序去读写。如果这次没有把数据全部读写完(如读写缓冲区太小)，那么下次
调用epoll_wait()时，它不会通知你，也就是它只会通知你一次，直到该文件描述符
上出现第二次可读写事件才会通知你！！！这种模式比水平触发效率高，系统不会充
斥大量你不关心的就绪文件描述符！！！


